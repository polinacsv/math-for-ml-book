# Linear Algebra

Linear algebra is the study of linear operations on mathematical objects such as vectors, matrices, and tensors, where data generally lives.


## Vectors

The most basic, nontrivial, object of linear algebra is a vector, which is an n-dimensional collection of elements (usually numbers).

In Python, the term **vector** doesn't refer to a specific type as it might in some other languages or mathematical contexts. However, it can be represented in several ways, depending on what you need the vector to do. Here are the common ways to represent vectors in Python:

### List

- A simple list can be used as a vector. Lists are best for general-purpose programming when you need a simple, flexible, and easy-to-use container for a collection of items. It is one-dimensional and can contain elements of different data types within the same list. 

- They offer basic functionality like append, extend, insert, remove, and sort. Lists are very flexible but do not provide built-in support for vectorized operations. 

- **Vectorized operations** refer to performing operations on entire arrays or series of data at once, rather than using loops to operate on individual elements. This concept is key in scientific computing and data analysis because it can greatly enhance performance by leveraging optimized low-level implementations and, in many cases, parallel processing capabilities. 

```{python}
list1 = [1, 2, 3]

list1
```

```{python}
list2 = [4, 5, 6]

result_1 = list1 + list2 # Instead of summing up each element, it appends the new list

result_1
```

In standard Python, without NumPy or Pandas, you would typically use list comprehensions or map functions for pseudo-vectorized operations, which are less efficient but still more concise than loops.

```{python}
result_2 = [x + y for x, y in zip(list1, list2)]  # Simulating vectorized addition

result_2
```


### NumPy Array 

- NumPy arrays are designed to be homogeneous, meaning all elements are of the same data type. This uniformity is key for high-performance mathematical computing. If elements of different types are given, NumPy will convert them to a common type that can represent all the values without loss of precision if possible. For example, if integers and floating-point numbers are used to create an array, all elements will be converted to floats. It is called **upcasting**.

- They support a wide array of mathematical and statistical operations. Arrays support vectorized operations, making them incredibly efficient for numerical calculations.

```{python}
import numpy as np
a = np.array([1, 2, 3])
a
```

`numpy` library is built around vectorized operations. All arithmetic operations (+, -, *, /) and many mathematical functions (sin, log, exp) are vectorized.

```{python}
b = np.array([4, 5, 6])
c = a + b  # Element-wise addition
c
```

### Pandas Series 

- A Series in pandas can also represent a vector. It is built on top of NumPy arrays and provides more functionality such as indexing with custom labels.

- Like NumPy arrays, Series are generally homogeneous but can hold any data type if needed. They perform best with a single data type.

- They extends NumPy's capabilities by adding powerful data manipulation tools, such as automatic alignment of data based on index, handling of missing data, time series functionality, and more.

- While generally fast, they can be slightly slower than NumPy arrays due to the overhead of index alignment and other data manipulation features.

- Unlike lists and NumPy arrays, which use implicit integer-based indexing, Series use an explicit index associated with each element.

```{python}
import pandas as pd
s1 = pd.Series([1, 2, 3], index=['a', 'b', 'c'])
s1
```

Built on NumPy, it extends vectorized operations to operations involving indices and alignment, which are particularly useful for time-series data and other forms of sequential data.

```{python}
s2 = pd.Series([4, 5, 6], index=['a', 'b', 'c'])
result = s1 + s2  # Element-wise addition with index alignment
result
```

## Matrices

Matrices are simply the superimposition of vectors with other vectors. An m by n matrix can be thought of as the superimposition of n m-dimensional column vectors or m n-dimensional row vectors. 

In Python, matrices can be represented and manipulated using different approaches and libraries, each suited to particular kinds of tasks, from simple 2D data structures to complex linear algebra operations. Hereâ€™s how you can handle matrices in Python using various tools:

### Lists of Lists

- The simplest way to represent a matrix in Python is using a list of lists. Each list represents a row of the matrix. This approach is intuitive and easy to use with native Python functionality, but it's not very efficient for large matrices or complex matrix operations.

- Use lists of lists for simple applications, or when you're working with very small matrices.

```{python}
# Create a 3x3 matrix using lists of lists
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

print(matrix)
```


### NumPy Arrays

- NumPy is the core library for numerical computing in Python and provides a powerful n-dimensional array object that can be used to represent vectors, matrices, and higher-dimensional datasets. NumPy arrays support element-wise operations and a host of mathematical functions that are essential for scientific computing.

- Use for scientific computing, where performance and a broad range of linear algebra operations are needed.

```{python}
# Create a 3x3 matrix using NumPy
matrix = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
])
# Multiply the matrix by 2
print(matrix * 2)
```

### Pandas DataFrame

- While primarily used for data manipulation and analysis, Pandas DataFrames can also represent matrices. They are particularly useful when you need labeled rows and columns, which isn't directly supported in NumPy arrays.

- Use for data analysis tasks where the matrix operations are straightforward and you need extensive capabilities for handling data, such as grouping, pivoting, and merging.

```{python}
# Create a matrix as a DataFrame
matrix = pd.DataFrame({
    'A': [1, 4, 7],
    'B': [2, 5, 8],
    'C': [3, 6, 9]
})
# Accessing a column
print(matrix['B'])
```

# Data Structures


![Data Structures](pictures/data_structures.png)

![Data Structures in Python](pictures/data_structures_in_python.png)

