[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "book",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "linear_algebra.html",
    "href": "linear_algebra.html",
    "title": "1  Linear Algebra",
    "section": "",
    "text": "1.1 Vectors\nIn Python, the term vector doesn’t refer to a specific type as it might in some other languages or mathematical contexts. However, it can be represented in several ways, depending on what you need the vector to do. Here are the common ways to represent vectors in Python:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Linear Algebra</span>"
    ]
  },
  {
    "objectID": "linear_algebra.html#vectors",
    "href": "linear_algebra.html#vectors",
    "title": "1  Linear Algebra",
    "section": "",
    "text": "1.1.1 List\n\nA simple list can be used as a vector. Lists are best for general-purpose programming when you need a simple, flexible, and easy-to-use container for a collection of items. It is one-dimensional and can contain elements of different data types within the same list.\nThey offer basic functionality like append, extend, insert, remove, and sort. Lists are very flexible but do not provide built-in support for vectorized operations.\nVectorized operations refer to performing operations on entire arrays or series of data at once, rather than using loops to operate on individual elements. This concept is key in scientific computing and data analysis because it can greatly enhance performance by leveraging optimized low-level implementations and, in many cases, parallel processing capabilities.\n\n\nlist1 = [1, 2, 3]\n\nlist1\n\n[1, 2, 3]\n\n\n\nlist2 = [4, 5, 6]\n\nresult_1 = list1 + list2 # Instead of summing up each element, it appends the new list\n\nresult_1\n\n[1, 2, 3, 4, 5, 6]\n\n\nIn standard Python, without NumPy or Pandas, you would typically use list comprehensions or map functions for pseudo-vectorized operations, which are less efficient but still more concise than loops.\n\nresult_2 = [x + y for x, y in zip(list1, list2)]  # Simulating vectorized addition\n\nresult_2\n\n[5, 7, 9]\n\n\n\n\n1.1.2 NumPy Array\n\nNumPy arrays are designed to be homogeneous, meaning all elements are of the same data type. This uniformity is key for high-performance mathematical computing. If elements of different types are given, NumPy will convert them to a common type that can represent all the values without loss of precision if possible. For example, if integers and floating-point numbers are used to create an array, all elements will be converted to floats. It is called upcasting.\nThey support a wide array of mathematical and statistical operations. Arrays support vectorized operations, making them incredibly efficient for numerical calculations.\n\n\nimport numpy as np\na = np.array([1, 2, 3])\na\n\narray([1, 2, 3])\n\n\nnumpy library is built around vectorized operations. All arithmetic operations (+, -, *, /) and many mathematical functions (sin, log, exp) are vectorized.\n\nb = np.array([4, 5, 6])\nc = a + b  # Element-wise addition\nc\n\narray([5, 7, 9])\n\n\n\n\n1.1.3 Pandas Series\n\nA Series in pandas can also represent a vector. It is built on top of NumPy arrays and provides more functionality such as indexing with custom labels.\nLike NumPy arrays, Series are generally homogeneous but can hold any data type if needed. They perform best with a single data type.\nThey extends NumPy’s capabilities by adding powerful data manipulation tools, such as automatic alignment of data based on index, handling of missing data, time series functionality, and more.\nWhile generally fast, they can be slightly slower than NumPy arrays due to the overhead of index alignment and other data manipulation features.\nUnlike lists and NumPy arrays, which use implicit integer-based indexing, Series use an explicit index associated with each element.\n\n\nimport pandas as pd\ns1 = pd.Series([1, 2, 3], index=['a', 'b', 'c'])\ns1\n\na    1\nb    2\nc    3\ndtype: int64\n\n\nBuilt on NumPy, it extends vectorized operations to operations involving indices and alignment, which are particularly useful for time-series data and other forms of sequential data.\n\ns2 = pd.Series([4, 5, 6], index=['a', 'b', 'c'])\nresult = s1 + s2  # Element-wise addition with index alignment\nresult\n\na    5\nb    7\nc    9\ndtype: int64",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Linear Algebra</span>"
    ]
  }
]